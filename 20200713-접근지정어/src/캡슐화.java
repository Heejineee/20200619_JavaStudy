/*
 * 	클래스의 구성 요소 : 멤버변수, 생성자, 메소드
 * 	
 * 	객체지향의 3대 요소 ==> 유지보수 용이하게 만듦 ==> 실행 속도가 늦다
 * 		- 데이터 보호 (데이터 사용하지 못하게 만드는 작업 : 은닉화
 * 								클래스와 클래스의 연결 => 감춘 데이터를 메소드를 통해 접근 가능하게 함 ==> 캡슐화)
 * 				- 접근지정어
 * 					- private
 * 					- protected
 * 					- public
 * 					- default
 * 		- 재사용 기법
 * 				- 상속 : is-a
 * 				- 포함 : has-a
 * 		- 수정, 추가
 * 				- 다형성
 * 						- 오버로딩 : 새로운 기능 추가
 * 						- 오버라이딩 : 기존에 있던 기능을 수정
 * 
 * 	접근지정어
 * 	=================================================
 * 							같은클래스		같은폴더			다른 폴더				모든 클래스
 * 													 (패키지)		  상속 받는 경우
 * 	=================================================
 * 		public					O					O							O							O
 * 	=================================================
 * 		protected			O					O							O							X
 * 	=================================================
 * 		default				O					O							X							X
 * 	=================================================
 * 		private					O					X							X							X
 * 	=================================================
 * 	접근 범위 크기
			- public > protected > default > private
 * 	사용 방식
 * 		멤버변수 => 다른 클래스에서 값을 변결 할 수 없게 은닉화 => private
 * 		메소드
 * 		생성자 => 다른 클래스와 연결해서 프로그램이 동작 => public
 * 
 * 	1) public : 전체공개 => 어떤 위치든 상관없이 사용 가능
 * 			ex) public int age;
 * 	2) protected : 상속을 받는 경우에 하위 클래스에서 사용 가능 ==> 사용 빈도가 낮음
 * 			ex) protected String name;
 * 			※ 상속에서 예외조건 
 * 					1) static => 사용이 가능하게 만든다
 * 					2) private => 상속이 된다 하지만 사용이 불가능
 * 					3) 생성자는 상속되지 않는다
 * 	3) default : 같은 패키지 안에서만 사용 가능 => src
 * 			ex) String name; (앞에 키워드 없이 사용함)
 * 	4) private : 자신의 클래스에서만 사용 가능(비공개)
 * 			※ 메소드를 통해 접근이 가능하게 하여 다른 클래스에서도 사용하게 할 수 있다
 * 
 * 	데이터 보호 : 값이 프로그램과 관련 없이 변질, 값 변경될 수도 있다
 * 							=> 캡슐화
 * 									1) 데이터 보호하는 목적(데이터 은닉화) : 필요할 때만 메소드를 이용해서 사용
 * 									2) 경계 구분
 * 					
 */
public class 캡슐화 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
